[project]
name = "evoselfcode"
version = "0.1.0"
description = "Iterative Self-Training and Dual Learning for Python Code Generation"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core dependencies
    "openai>=1.0.0",        # OpenAI API client (async support)
    "pyyaml>=6.0",          # YAML configuration parsing
    "rich>=13.0.0",         # Beautiful console output and logging
    "typer>=0.9.0",         # CLI framework
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",          # Linting and formatting
    "pytest>=7.0.0",        # Testing
    "pytest-asyncio>=0.21.0",  # Async test support
]

[project.scripts]
evoselfcode = "evoselfcode.cli:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "ruff>=0.1.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

