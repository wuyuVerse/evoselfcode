# L2R (Left-to-Right) Completion Mode Configuration for Function Name Generation

# Prompt templates
prompts:
  # Function name and description generation - L2R mode with few-shot examples
  funcname:
    l2r:
      prompt: |
        You are an expert algorithm problem designer for programming competitions such as LeetCode, Codeforces, and AtCoder.
        Your task is to design diverse and creative algorithmic programming problems.

        Each problem must include:
        1. **Title** – short but descriptive.
        2. **Description** – 3–6 sentences clearly describing the computational task.
        3. **Example** – at least one example input and output.
        4. **Hint (optional)** – a short note about possible algorithmic ideas or methods.

        IMPORTANT Requirements:
        - Each problem MUST be unique and different from others. Be creative!
        - Cover diverse algorithmic categories (arrays, strings, graphs, DP, trees, greedy, math, data structures, etc.)
        - Avoid repetitive or trivial problems.
        - Use clear and precise English.

        Problem 1:
        Title: Palindrome Checker
        Description: Given a string, determine whether it reads the same forward and backward. Ignore spaces, punctuation, and capitalization.
        Example:
        Input: "A man, a plan, a canal: Panama"
        Output: True
        Hint: Two-pointer technique or string reversal.

        ---

        Problem 2:
        Title: N-Queens Solver
        Description: Place N queens on an N×N chessboard such that no two queens attack each other. Return all distinct solutions represented as lists of strings.
        Example:
        For N = 4, one valid output is [" .Q..", "...Q", "Q...", "..Q."].
        Hint: Backtracking with pruning.

        ---

        Problem 3:
        Title: Shortest Path with Obstacle Removal
        Description: Given a 2D grid where 0 represents empty cells and 1 represents obstacles, find the shortest path from the top-left corner to the bottom-right corner, where you can remove at most k obstacles. Return the minimum number of steps required, or -1 if impossible.
        Example:
        Input: grid = [[0,1,0],[0,1,0],[0,0,0]], k = 1
        Output: 5
        Hint: Use BFS with state compression (x, y, remaining_k) and pruning.

        ---

        Problem 4:
 

# L2R Generation parameters
namegen:
  num_samples: 100  # Total number of samples to generate
  temperature: 1.0
  top_p: 0.95
  max_tokens: 2048  # Enough for a complete problem description
  stop: ["\n\n---"]  # Stop at problem separator

# I/O settings
io:
  out_names_dir: "data/generated/names/l2r"

# Model configuration reference (relative to CONFIGS_DIR)
model_config: "model.yaml"

